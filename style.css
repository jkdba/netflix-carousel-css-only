

* {
  margin: 0;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  font-family: system-ui;
  font-size: 1.25rem;
  color: white;
  background: #121212;
}

img,
svg {
  max-width: 100%;
  display: block;
}

/* general styling */

.container {
  inline-size: min(100% - 4rem, 70rem);
  margin-inline: auto;
}

.flow {
  display: grid;
  gap: var(--flow-spacer, 1rem);
}

.page-header {
  padding-block: 5rem;
  margin-block-end: 5rem;
  background-image: url("https://images.unsplash.com/photo-1641353989082-9b15fa661805?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNDU4OXwwfDF8cmFuZG9tfHx8fHx8fHx8MTY0MzM5ODcyOA&ixlib=rb-1.2.1&q=80&w=1200"),
    linear-gradient(-25deg, rgb(0 0 0 / 0), rgb(0 0 0 / 1) 50%);
  background-size: cover;
  background-blend-mode: multiply;
  color: white;
}

.page-title {
  font-size: 4rem;
  margin: 0;
}

.section-title {
  margin-block: 4rem 1rem;
}

/* media scroller */

.media-container {
  position: relative;
}

.media-scroller,
.media-group {
  display: grid;
  gap: 0.25rem;
  grid-auto-flow: column;
}

.media-scroller {
  overflow-x: hidden;
  scroll-behavior: smooth;
  grid-auto-columns: 100%;
  padding: 0 3rem;
  scroll-padding-inline: 3rem;
}

.media-group {
  grid-auto-columns: 1fr;
}

.media-element {
  border-radius: 0.25rem;
  overflow: hidden;
}

.media-element > img {
  width: 100%;
  aspect-ratio: 16 / 9;
  object-fit: cover;
}

.next,
.previous {
  display: flex;
  visibility: hidden;
  align-items: center;
  z-index: 10;
  position: absolute;
  width: 3rem;
  padding: 1rem;
  background: rgb(0 0 0 / 0);
  opacity: 0;
  transition: opacity 200ms;
}

.previous {
  left: 0;
  top: 0;
  bottom: 0;
}

.next {
  right: 0;
  top: 0;
  bottom: 0;
}

:where(.next, .previous):hover {
  background: rgb(0 0 0 / 0.3);
}

:where(.next, .previous) > svg {
  transition: transform 75ms linear;
  transform: scale(1);
}

:where(.next, .previous):hover > svg {
  transform: scale(1.2);
}

.media-group:hover :where(.next, .previous) {
  opacity: 1;
}

/*
  both of these are to handle for when no target is selected and the transition from
  no target to target.

  deal with with no target and first child behavior, z-index plays the role of ensuring
  the adjacent sibiling's .next link lands on top of the first child's .next link so that
  the sibling's .next link becomes hovered when its switched to via navigation from the first child
  when no target is specified.

  using opacity and visibility instead of display so a transition can be applied to the opacity of the .next, .previous links
  creating a smooth transition from the first or last child to the next or previous child which have both links visible.
*/
.media-group:not(:target):first-child:hover :where(.next, .previous) {
  z-index: 0;
  visibility: visible;
}

.media-scroller:hover .media-group:target :where(.next, .previous) {
  z-index: 1;
  visibility: visible;
}

/* navigation indicators */

.navigation-indicators {
  opacity: 0;
  position: absolute;
  display: flex;
  gap: 3px;

  top: -1rem;
  right: 2rem;
}

.navigation-indicators > * {
  width: 1rem;
  height: 2px;
  background: white;
  opacity: 0.5;
}

/* similar hack as before to deal with initial state of no target */
.media-group:not(:target):first-child:hover ~ .navigation-indicators > *:nth-child(1),
.media-group:nth-child(1):target ~ .navigation-indicators > *:nth-child(1),
.media-group:nth-child(2):target ~ .navigation-indicators > *:nth-child(2),
.media-group:nth-child(3):target ~ .navigation-indicators > *:nth-child(3),
.media-group:nth-child(4):target ~ .navigation-indicators > *:nth-child(4) {
  opacity: 1;
}

.media-scroller:hover .navigation-indicators {
  opacity: 1;
}
